// Code generated by protoc-gen-go. DO NOT EDIT.
// source: comment.proto

package com_exapmle_spike

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Comment struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PlaylistId           int64    `protobuf:"varint,2,opt,name=playlistId,proto3" json:"playlistId,omitempty"`
	UserName             string   `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
	Comment              string   `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Comment) Reset()         { *m = Comment{} }
func (m *Comment) String() string { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()    {}
func (*Comment) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{0}
}

func (m *Comment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Comment.Unmarshal(m, b)
}
func (m *Comment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Comment.Marshal(b, m, deterministic)
}
func (m *Comment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Comment.Merge(m, src)
}
func (m *Comment) XXX_Size() int {
	return xxx_messageInfo_Comment.Size(m)
}
func (m *Comment) XXX_DiscardUnknown() {
	xxx_messageInfo_Comment.DiscardUnknown(m)
}

var xxx_messageInfo_Comment proto.InternalMessageInfo

func (m *Comment) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Comment) GetPlaylistId() int64 {
	if m != nil {
		return m.PlaylistId
	}
	return 0
}

func (m *Comment) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *Comment) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type Comments struct {
	Comment              []*Comment `protobuf:"bytes,1,rep,name=comment,proto3" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Comments) Reset()         { *m = Comments{} }
func (m *Comments) String() string { return proto.CompactTextString(m) }
func (*Comments) ProtoMessage()    {}
func (*Comments) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{1}
}

func (m *Comments) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Comments.Unmarshal(m, b)
}
func (m *Comments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Comments.Marshal(b, m, deterministic)
}
func (m *Comments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Comments.Merge(m, src)
}
func (m *Comments) XXX_Size() int {
	return xxx_messageInfo_Comments.Size(m)
}
func (m *Comments) XXX_DiscardUnknown() {
	xxx_messageInfo_Comments.DiscardUnknown(m)
}

var xxx_messageInfo_Comments proto.InternalMessageInfo

func (m *Comments) GetComment() []*Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type CommentRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommentRequest) Reset()         { *m = CommentRequest{} }
func (m *CommentRequest) String() string { return proto.CompactTextString(m) }
func (*CommentRequest) ProtoMessage()    {}
func (*CommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{2}
}

func (m *CommentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommentRequest.Unmarshal(m, b)
}
func (m *CommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommentRequest.Marshal(b, m, deterministic)
}
func (m *CommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentRequest.Merge(m, src)
}
func (m *CommentRequest) XXX_Size() int {
	return xxx_messageInfo_CommentRequest.Size(m)
}
func (m *CommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommentRequest proto.InternalMessageInfo

func (m *CommentRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CommentsRequest struct {
	PlaylistId           int64    `protobuf:"varint,1,opt,name=playlistId,proto3" json:"playlistId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommentsRequest) Reset()         { *m = CommentsRequest{} }
func (m *CommentsRequest) String() string { return proto.CompactTextString(m) }
func (*CommentsRequest) ProtoMessage()    {}
func (*CommentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{3}
}

func (m *CommentsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommentsRequest.Unmarshal(m, b)
}
func (m *CommentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommentsRequest.Marshal(b, m, deterministic)
}
func (m *CommentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentsRequest.Merge(m, src)
}
func (m *CommentsRequest) XXX_Size() int {
	return xxx_messageInfo_CommentsRequest.Size(m)
}
func (m *CommentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommentsRequest proto.InternalMessageInfo

func (m *CommentsRequest) GetPlaylistId() int64 {
	if m != nil {
		return m.PlaylistId
	}
	return 0
}

func init() {
	proto.RegisterType((*Comment)(nil), "com.exapmle.spike.Comment")
	proto.RegisterType((*Comments)(nil), "com.exapmle.spike.Comments")
	proto.RegisterType((*CommentRequest)(nil), "com.exapmle.spike.CommentRequest")
	proto.RegisterType((*CommentsRequest)(nil), "com.exapmle.spike.CommentsRequest")
}

func init() { proto.RegisterFile("comment.proto", fileDescriptor_749aee09ea917828) }

var fileDescriptor_749aee09ea917828 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0xcf, 0xcd,
	0x4d, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x4c, 0xce, 0xcf, 0xd5, 0x4b,
	0xad, 0x48, 0x2c, 0xc8, 0xcd, 0x49, 0xd5, 0x2b, 0x2e, 0xc8, 0xcc, 0x4e, 0x55, 0xca, 0xe7, 0x62,
	0x77, 0x86, 0xa8, 0x11, 0xe2, 0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0e,
	0x62, 0xca, 0x4c, 0x11, 0x92, 0xe3, 0xe2, 0x2a, 0xc8, 0x49, 0xac, 0xcc, 0xc9, 0x2c, 0x2e, 0xf1,
	0x4c, 0x91, 0x60, 0x02, 0x8b, 0x23, 0x89, 0x08, 0x49, 0x71, 0x71, 0x94, 0x16, 0xa7, 0x16, 0xf9,
	0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x2b, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xf9, 0x42, 0x12, 0x5c, 0xec,
	0x50, 0xab, 0x25, 0x58, 0xc0, 0x52, 0x30, 0xae, 0x92, 0x03, 0x17, 0x07, 0xd4, 0xc2, 0x62, 0x21,
	0x13, 0x84, 0x2a, 0x46, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x29, 0x3d, 0x0c, 0x17, 0xea, 0x41, 0x55,
	0x23, 0x4c, 0x50, 0xe0, 0xe2, 0x83, 0x89, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x63, 0xb8, 0x5c, 0xc9,
	0x90, 0x8b, 0x1f, 0x66, 0x07, 0x4c, 0x09, 0xaa, 0x67, 0x18, 0xd1, 0x3d, 0x63, 0xb4, 0x93, 0x11,
	0x6e, 0x6a, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa, 0x90, 0x37, 0x17, 0x97, 0x7b, 0x6a, 0x09,
	0x2c, 0x74, 0x14, 0xf1, 0x38, 0x0d, 0x62, 0x87, 0x14, 0x1e, 0xd7, 0x0b, 0x45, 0x71, 0x89, 0x23,
	0x0c, 0x2b, 0x76, 0xaa, 0x0c, 0x40, 0x84, 0xa3, 0x12, 0x6e, 0x6d, 0x30, 0xe7, 0x4b, 0x49, 0xe3,
	0x51, 0x93, 0xc4, 0x06, 0x8e, 0x5d, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x88, 0x36, 0xa6,
	0xd8, 0xee, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommentServiceClient is the client API for CommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommentServiceClient interface {
	GetComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*Comment, error)
	GetCommentsByPlaylistId(ctx context.Context, in *CommentsRequest, opts ...grpc.CallOption) (*Comments, error)
}

type commentServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommentServiceClient(cc *grpc.ClientConn) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) GetComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, "/com.exapmle.spike.CommentService/GetComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetCommentsByPlaylistId(ctx context.Context, in *CommentsRequest, opts ...grpc.CallOption) (*Comments, error) {
	out := new(Comments)
	err := c.cc.Invoke(ctx, "/com.exapmle.spike.CommentService/GetCommentsByPlaylistId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServiceServer is the server API for CommentService service.
type CommentServiceServer interface {
	GetComment(context.Context, *CommentRequest) (*Comment, error)
	GetCommentsByPlaylistId(context.Context, *CommentsRequest) (*Comments, error)
}

func RegisterCommentServiceServer(s *grpc.Server, srv CommentServiceServer) {
	s.RegisterService(&_CommentService_serviceDesc, srv)
}

func _CommentService_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.exapmle.spike.CommentService/GetComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetComment(ctx, req.(*CommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetCommentsByPlaylistId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetCommentsByPlaylistId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.exapmle.spike.CommentService/GetCommentsByPlaylistId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetCommentsByPlaylistId(ctx, req.(*CommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.exapmle.spike.CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComment",
			Handler:    _CommentService_GetComment_Handler,
		},
		{
			MethodName: "GetCommentsByPlaylistId",
			Handler:    _CommentService_GetCommentsByPlaylistId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comment.proto",
}
